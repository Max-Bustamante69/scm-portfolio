---
import ExperienceCard from "./ExperienceCard.astro";
import ExperienceSummary from "./ExperienceSummary.astro";
import { getCollection, type CollectionEntry } from "astro:content";

type Experience = CollectionEntry<"experiences">;

const experiences: Experience[] = await getCollection("experiences");
---

<section
  id="experience-section"
  aria-label="Professional Experience"
  class="flex w-full gap-12 lg:justify-between flex-col lg:flex-row"
>
  <div
    class="flex lg:w-2/3 lg:max-w-[500px] flex-col gap-2"
    role="tablist"
    aria-orientation="vertical"
    aria-label="Experience tabs"
    id="experience-tablist"
  >
    {
      experiences.map((experience, index) => {
        const { jobTitle, companyName, icon } = experience.data;
        return (
          <div role="presentation">
            <ExperienceSummary
              role="tab"
              id={`experience-tab-${index}`}
              aria-selected="false"
              aria-controls={`experience-panel-${index}`}
              tabindex="-1"
              data-experience-index={index}
              jobTitle={jobTitle}
              companyName={companyName}
              icon={icon}
            />
          </div>
        );
      })
    }
  </div>

  <div class="relative lg:w-1/2" id="experience-panels-container">
    {
      experiences.map((experience, index) => {
        const {
          jobTitle,
          companyName,
          startDate,
          endDate,
          skills,
          description,
          icon,
        } = experience.data;
        return (
          <div
            role="tabpanel"
            id={`experience-panel-${index}`}
            aria-labelledby={`experience-tab-${index}`}
            tabindex="0"
            class="hidden"
            hidden
          >
            <ExperienceCard
              jobTitle={jobTitle}
              companyName={companyName}
              startDate={startDate}
              endDate={endDate}
              skills={skills}
              description={description}
              icon={icon}
            />
          </div>
        );
      })
    }
  </div>
</section>

<script>
  const experienceSelectedClass = "bg-secondary/40";
  const experienceTabs = document.querySelectorAll<HTMLElement>(
    '#experience-tablist [role="tab"]'
  );
  const experiencePanels = document.querySelectorAll<HTMLElement>(
    '#experience-panels-container [role="tabpanel"]'
  );
  let currentExperienceIndex = 0;

  function switchExperienceTab(index: number) {
    const oldTab = experienceTabs[currentExperienceIndex];
    const newTab = experienceTabs[index];

    // Update tabs
    oldTab.setAttribute("aria-selected", "false");
    oldTab.classList.remove(experienceSelectedClass);
    oldTab.tabIndex = -1;

    newTab.setAttribute("aria-selected", "true");
    newTab.classList.add(experienceSelectedClass);
    newTab.tabIndex = 0;
    newTab.focus();

    // Update panels
    experiencePanels[currentExperienceIndex].hidden = true;
    experiencePanels[currentExperienceIndex].classList.add("hidden");
    experiencePanels[currentExperienceIndex].classList.remove("block");

    experiencePanels[index].hidden = false;
    experiencePanels[index].classList.remove("hidden");
    experiencePanels[index].classList.add("block");

    currentExperienceIndex = index;
  }

  // Set the first tab as active on load
  if (experienceTabs.length) {
    experienceTabs[0].setAttribute("aria-selected", "true");
    experienceTabs[0].tabIndex = 0;
    experienceTabs[0].classList.add(experienceSelectedClass);

    experiencePanels[0].hidden = false;
    experiencePanels[0].classList.remove("hidden");
    experiencePanels[0].classList.add("block");
  }

  // Handle clicks
  experienceTabs.forEach((tab) => {
    tab.addEventListener("click", () => {
      const index = Number(tab.getAttribute("data-experience-index"));
      switchExperienceTab(index);
    });
  });

  // Handle keyboard navigation
  experienceTabs.forEach((tab) => {
    tab.addEventListener("keydown", (e: KeyboardEvent) => {
      let targetIndex = currentExperienceIndex;

      switch (e.key) {
        case "ArrowUp":
          e.preventDefault();
          targetIndex =
            currentExperienceIndex > 0
              ? currentExperienceIndex - 1
              : experienceTabs.length - 1;
          break;
        case "ArrowDown":
          e.preventDefault();
          targetIndex =
            currentExperienceIndex < experienceTabs.length - 1
              ? currentExperienceIndex + 1
              : 0;
          break;
        case "Home":
          e.preventDefault();
          targetIndex = 0;
          break;
        case "End":
          e.preventDefault();
          targetIndex = experienceTabs.length - 1;
          break;
        default:
          return;
      }

      switchExperienceTab(targetIndex);
    });
  });
</script>
