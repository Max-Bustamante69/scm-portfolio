---
import { getCollection, type CollectionEntry } from "astro:content";
import SkillCard from "./SkillCard.astro";

type Experience = CollectionEntry<"skills">;
const skillsCollection: Experience[] = await getCollection("skills");
const skills = skillsCollection.map((skill) => skill.data);

// Always start with Frontend and Backend
const baseTabs = ["Frontend", "Backend"];
const categorySet = new Set<string>();
skills.forEach(({ categories }) =>
  categories.forEach((cat) => {
    if (!baseTabs.includes(cat)) categorySet.add(cat);
  })
);
const tabs = [...baseTabs, ...Array.from(categorySet)];
---

<div class="flex flex-col items-center">
  <div
    role="tablist"
    aria-label="Skill categories"
    class="flex bg-card-background/60 rounded-full px-4 py-2 space-x-6 text-xl shadow-lg mb-10"
    id="skills-tablist"
  >
    {
      tabs.map((tab, i) => (
        <button
          role="tab"
          type="button"
          aria-selected="false"
          tabindex="-1"
          class="px-4 py-2 rounded-full transition duration-200 text-subtext hover:text-white"
          data-skill-category={tab}
          data-skill-tab-index={i}
          id={`skill-tab-${i}`}
        >
          {tab}
        </button>
      ))
    }
  </div>

  <div
    class="grid grid-cols-2 lg:grid-cols-3 gap-6 px-2 w-full content-center justify-items-center md:gap-8"
    id="skills-cards-container"
  >
    {
      skills.map(({ skillName, description, proficiency, categories }) => (
        <SkillCard
          name={skillName}
          description={description}
          proficiency={proficiency}
          categories={categories}
          data-skill-categories={categories.join(",")}
          class="skill-card hidden"
        />
      ))
    }
  </div>
</div>

<script type="module" defer>
  const skillTabs = Array.from(
    document.querySelectorAll('#skills-tablist [role="tab"]')
  );
  const skillCards = Array.from(document.querySelectorAll(".skill-card"));

  let currentSkillTabIdx = 0;

  function filterSkillCards(category) {
    skillCards.forEach((card) => {
      const cardCategories = card.dataset.skillCategories.split(",");
      if (cardCategories.includes(category)) {
        card.classList.remove("hidden");
        card.classList.add("block");
      } else {
        card.classList.remove("block");
        card.classList.add("hidden");
      }
    });
  }

  function selectSkillTab(newIdx) {
    if (newIdx === currentSkillTabIdx) return;

    // Update previous tab
    const prevTab = skillTabs[currentSkillTabIdx];
    prevTab.setAttribute("aria-selected", "false");
    prevTab.tabIndex = -1;
    prevTab.classList.remove("text-accent");
    prevTab.classList.add("text-subtext");

    // Update new tab
    const newTab = skillTabs[newIdx];
    newTab.setAttribute("aria-selected", "true");
    newTab.tabIndex = 0;
    newTab.classList.add("text-accent");
    newTab.classList.remove("text-subtext");

    // Update cards
    filterSkillCards(newTab.dataset.skillCategory);

    currentSkillTabIdx = newIdx;
  }

  // Set the first tab as active on load
  if (skillTabs.length) {
    skillTabs[0].setAttribute("aria-selected", "true");
    skillTabs[0].tabIndex = 0;
    skillTabs[0].classList.add("text-accent");
    skillTabs[0].classList.remove("text-subtext");
    filterSkillCards(skillTabs[0].dataset.skillCategory);
  }

  skillTabs.forEach((tab, idx) => {
    tab.addEventListener("click", (e) => {
      e.preventDefault();
      selectSkillTab(idx);
    });
    tab.addEventListener("keydown", (e) => {
      if (e.key === "ArrowRight") {
        e.preventDefault();
        selectSkillTab((idx + 1) % skillTabs.length);
      } else if (e.key === "ArrowLeft") {
        e.preventDefault();
        selectSkillTab((idx - 1 + skillTabs.length) % skillTabs.length);
      } else if (e.key === "Home") {
        e.preventDefault();
        selectSkillTab(0);
      } else if (e.key === "End") {
        e.preventDefault();
        selectSkillTab(skillTabs.length - 1);
      }
    });
  });
</script>
